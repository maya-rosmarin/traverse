{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./maze.js","webpack:///./maze_generators/bfs.js","webpack:///./maze_generators/create_grid.js","webpack:///./node_modules/manhattan/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;ACnEA;AAC6C;;AAE7C;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACND;AAC6C;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,kFAAkF;AAC3H;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,2HAA2H;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C,8BAA8B,wBAAwB;AACtD,8BAA8B,iBAAiB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;AChLA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA,iBAAiB,oBAAoB;AACrC,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5CA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./maze.js\");\n","import BFS from './maze_generators/bfs';\nimport { createGridArray, createGridGraphic } from './maze_generators/create_grid';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  let bfs = new BFS(20, 20);\n  bfs.generatePaths([0,0]);\n});\n","import * as manhattan from 'manhattan';\nimport { createGridArray, createGridGraphic } from './create_grid';\n\nclass BFS {\n  constructor (width, height) {\n    this.grid = createGridArray(width, height)\n    this.grid.width = width;\n    this.grid.height = height;\n    createGridGraphic(width*10, height*10);\n  }\n\n\n  unvisited () {\n    let unvisited = [];\n    for (let key in this.grid) {\n      if (this.grid[key] === false) {\n        unvisited.push(key)\n      };\n    }\n    return unvisited;\n  }\n\n  nextStep (currentNode) {\n    let unvisited = this.unvisited();\n    let children = this.children(currentNode);\n    children = children.filter(child => { return this.children(child).length >= 2 && this.arrayIncludes(unvisited, child) })\n    let randomIndex = Math.floor(Math.random() * children.length)\n    this.grid[children[randomIndex]] = true;\n    return children[randomIndex];\n  }\n\n  animate (coords) {\n    let canvas = document.getElementById(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n    let i = 0;\n    let interval = setInterval( () => {\n      context.fillStyle='white';\n      context.fillRect(10*coords[i][0], 10*coords[i][1], 10, 10);\n      i++;\n    }, 100);\n    if (i >= coords.length) {\n      clearInterval(interval);\n    }\n  }\n\n  generatePaths (startNode) {\n    let canvas = document.getElementById(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n    let queue = [[startNode]];\n    let pathCells = [startNode];\n    let wallCells = [];\n    let interval, walls;\n    while (queue.length) {\n      let current = queue.shift();\n        let children = this.children(current[0]);\n        if (children) {\n          children = children.filter(child => { return this.children(child).length >= 1 && !this.arrayIncludes(pathCells, child) && !this.arrayIncludes(wallCells, child)})\n          let randomIndex = Math.floor(Math.random() * children.length)\n          wallCells = wallCells.concat(children.slice(0, randomIndex).concat(children.slice(randomIndex + 1)))\n          debugger\n          this.grid[children[randomIndex]] = true;\n          pathCells.push(children[randomIndex]);\n          queue.push([children[randomIndex]])\n          // this.generateTangentPaths(wallCells[randomIndex], this.unvisited())\n          let i = 0;\n          if (children[randomIndex]) {\n            interval = setInterval( () => {\n            context.fillStyle='white';\n            context.fillRect(10*children[randomIndex][0], 10*children[randomIndex][1], 10, 10);\n            i++;\n          }, 200);\n          if (i >= pathCells.length) {\n            clearInterval(interval);\n          }\n          for (let j = 0; j < wallCells.length; j++) {\n            context.fillStyle='black';\n            context.fillRect(10*wallCells[j][0], 10*wallCells[j][1], 10, 10);\n          }\n        }\n      }\n    }\n    this.ensureLongPath(pathCells);\n    console.log(`wallcells: ${wallCells.length}`);\n    console.log(`unvisited: ${this.unvisited().length}`);\n    console.log(`pathcells: ${pathCells.length}`);\n  };\n\n  generateTangentPaths (startNode, unvisited) {\n    let length = unvisited.length;\n    while (length) {\n      this.generatePaths(startNode);\n    }\n  }\n\n  ensureLongPath (pathCells) {\n    let sorted;\n    pathCells.splice(-1, 1);\n    let filtered = pathCells.filter(cell => cell[0] === this.grid.width-1)\n    if (!filtered.length) {\n      sorted = pathCells.sort((el1, el2) => {\n        return el1[0] - el2[0];\n      })\n      this.generatePaths(sorted.pop());\n    }\n  }\n\n  generate (root) {\n    let queue = [[root]];\n    let visitedNodes = [root];\n    while (queue.length) {\n      let visited = queue.shift();\n      if (typeof visited === \"string\") {\n        visited = visited.split(\",\").map(i => Number(i));\n      } else if (visited.length === 1) {\n        visited = visited[0];\n      }\n      this.grid[visited] = true;\n      let children = this.children(visited)\n      if (!children.length) {\n        continue;\n      }\n      for (let i = 0; i < children.length; i++) {\n        if (!this.arrayIncludes(visitedNodes, children[i])) {\n          queue.push(children[i]);\n          visitedNodes.push(children[i])\n        }\n      }\n    }\n    return visitedNodes;\n  };\n\n  arrayIncludes (array, node) {\n    if (typeof node === 'string') {\n      node = node.split(',').map(i => Number(i));\n    }\n    for (let i = 0; i < array.length; i++) {\n      if (typeof array[i] === 'string') {\n        array[i] = array[i].split(',').map(i => Number(i));\n      }\n      if (array[i][0] == node[0] && array[i][1] == node[1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  // animatePath (node, limit) {\n  //   let i = 0;\n  //   let interval = setInterval( () => {\n  //     context.fillStyle='white';\n  //     context.fillRect(10*node[0], 10*node[1], 10, 10);\n  //     i++;\n  //     },\n  //   2000);\n  //   if (i >= limit) {\n  //     clearInterval(interval);\n  //   }\n  // }\n\n  children (node) {\n    if (node) {\n    let childrenNodes = [];\n      Object.keys(this.grid).map(key => {\n        let coord = key.split(',').map(i => Number(i));\n        if ((coord[0] == node[0] && coord[1] == node[1] + 1) || (coord[0] == node[0] && coord[1] == node[1] - 1) || (coord[0] == node[0] + 1 && coord[1] == node[1]) || (coord[0] == node[0] - 1 && coord[1] == node[1])) {\n          childrenNodes.push(coord);\n        }\n      }\n    )\n    return childrenNodes;\n  }\n  }\n\n}\n\nexport default BFS\n","import * as manhattan from 'manhattan';\nimport BFS from './bfs';\n\nexport const createGridArray = (width, height) => {\n  let nodes = {};\n  let xCoords = [];\n  let yCoords = [];\n  for (let i = 0; i < width; i++) {\n    xCoords.push(i)\n  }\n  for (let j = 0; j < height; j++) {\n    yCoords.push(j)\n  }\n  for (let i = 0; i < xCoords.length; i++) {\n    for (let j = 0; j < yCoords.length; j++) {\n      nodes[[xCoords[i], yCoords[j]]] = false;\n    }\n  }\n  return nodes;\n}\n\nexport const createGridGraphic = (width, height) => {\n  let canvas = document.getElementById(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n  context.fillStyle = 'pink';\n  context.fillRect(0, 0, width, height);\n  let bw = width;\n  let bh = height;\n  let p = 0;\n  context.fillStyle = 'white';\n  context.fillRect(0, 0, 10, 10);\n  function drawGrid () {\n    for (let i = 0; i <= bw; i += 10) {\n      context.moveTo(0.5 + i, 0);\n      context.lineTo(0.5 + i, bh);\n    }\n    for (let j = 0; j <= bh; j += 10) {\n      context.moveTo(0, 0.5 + j);\n      context.lineTo(bw, 0.5 + j);\n    }\n    context.strokeStyle = 'white';\n    context.stroke();\n  }\n  drawGrid();\n}\n","module.exports = function distance(a, b) {\n  var distance = 0\n  var dimensions = Math.max(a.length, b.length)\n  for (var i = 0; i < dimensions; i++) {\n    distance += Math.abs((b[i] || 0) - (a[i] || 0))\n  }\n  return distance\n}\n"],"sourceRoot":""}